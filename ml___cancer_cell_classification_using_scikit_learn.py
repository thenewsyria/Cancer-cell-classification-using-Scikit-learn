# -*- coding: utf-8 -*-
"""ML___Cancer_cell_classification_using_Scikit_learn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/136nX_ozYlvPN-M04ssRZlneI_BIB7iNv
"""

!pip install scikit-learn

"""1. Setting Up and Loading the Dataset
python
Copy code


"""

# Importing the Python module
import sklearn

# Importing the dataset
from sklearn.datasets import load_breast_cancer

# Loading the dataset
data = load_breast_cancer()

"""# New Section

2. Organizing the Data
"""

# Organize our data
label_names = data['target_names']   # Possible classifications ('malignant' and 'benign')
labels = data['target']              # The actual classifications (0 or 1 for each sample)
feature_names = data['feature_names']  # Names of the cell features (e.g., mean radius, mean texture)
features = data['data']              # The feature values themselves and Each of these numbers corresponds to a feature value (like mean radius or mean texture)

"""3. Exploring the Data


"""

print(label_names)
print(labels)
print(feature_names)
print(features)

"""4. Splitting the Data into Training and Testing Sets"""

from sklearn.model_selection import train_test_split

# Splitting the data
train, test, train_labels, test_labels = train_test_split(features, labels, test_size=0.33, random_state=42)

"""5. Building and Training the Model"""

from sklearn.naive_bayes import GaussianNB

# Initializing the classifier
gnb = GaussianNB()   #which assumes that features follow a normal distribution. This algorithm is simple and effective for classification tasks like this one.

# Training the classifier
model = gnb.fit(train, train_labels)

"""6. Making Predictions


"""

# Making predictions
predictions = gnb.predict(test)

# Printing the predictions
print(predictions)


# The model is now ready to make predictions. We use predict() to classify the samples in our test set,
# producing an array of predictions (0 or 1) for each sample.

"""7. Evaluating the Model


"""

from sklearn.metrics import accuracy_score

# Evaluating the accuracy
print(accuracy_score(test_labels, predictions))

"""Accuracy: The accuracy score is calculated by comparing the predicted labels to the actual labels (test_labels).
This tells us how many of the classifications were correct. For example, in our case 0.94, it means the model correctly classified 94% of the test samples.


"""